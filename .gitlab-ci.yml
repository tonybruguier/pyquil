include:
  - project: rigetti/forest/gitlab-pipelines
    file: docker.gitlab-ci.yml

default:
  image: python:3.7
  tags:
    - ec2-docker

stages:
  - test
  - deploy

cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .cache/pip
    - .venv

.install-dependencies:
  &install-dependencies # Recommended install method for Poetry: https://python-poetry.org/docs/
  - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
  - source $HOME/.poetry/env
  - poetry --version
  - poetry config virtualenvs.in-project true
  - poetry config experimental.new-installer false  # Address flaky poetry installs, see: https://github.com/python-poetry/poetry/issues/3199
  - poetry install -vv

.install-dephell: &install-dephell # Install dephell to auto-generate setup.py
  - curl -L dephell.org/install | python

.install-npm: &install-npm
  - curl -sL https://deb.nodesource.com/setup_12.x | bash -
  - apt-get update
  - apt-get install -f -y nodejs
  - npm i

.publish-pypi-public: &publish-pypi-public
  - poetry config http-basic.pypi rigetti $PUBLIC_PYPI_PASSWORD
  - poetry publish

.publish-pypi-test: &publish-pypi-test
  - poetry config repositories.testpypi https://test.pypi.org/legacy/
  - poetry config http-basic.testpypi rigetti $TEST_PYPI_PASSWORD
  - poetry publish --build -r testpypi

.verify-docker: &verify-docker
  # test that the Docker image doesn't error when performing simple tasks
  stage: deploy
  image: docker:stable
  tags:
    - dockerd
    - github
  script:
    - docker run --rm $TEST_IMAGE python -c "from pyquil import get_qc; qvm = get_qc('9q-qvm')"

# global build variables
variables:
  IMAGE: rigetti/forest
  QCS_SETTINGS_APPLICATIONS_PYQUIL_QVM_URL: "http://qvm:5000"
  QCS_SETTINGS_APPLICATIONS_PYQUIL_QUILC_URL: "tcp://quilc:5555"

# Docker images to spin up along with the various CI jobs
services:
  - name: rigetti/qvm
    alias: qvm
    command: ["-S"]
  - name: rigetti/quilc
    alias: quilc
    command: ["-R"]


####################################################################################################
# EVERY-COMMIT JOBS
####################################################################################################

Test Docs:
  stage: test
  script:
    - *install-dependencies
    - apt-get update && apt-get install -y pandoc
    - poetry run make docs

Style:
  stage: test
  script:
    - *install-dependencies
    - poetry run make check-all
  rules:
    # Skip this job if it was triggered by a tag
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always

Test (3.7):
  stage: test
  image: python:3.7
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - *install-dependencies
    - poetry run make test

Test (3.8):
  stage: test
  image: python:3.8
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - *install-dependencies
    - poetry run make test

Coverage:
  stage: test
  script:
    - *install-dependencies
    - poetry run make coverage
  allow_failure: true


####################################################################################################
# MASTER-ONLY JOBS
####################################################################################################

# create a Docker image from this master commit (see rigetti/gitlab-pipelines/docker.gitlab-ci.yml)
Docker (Edge):
  extends: .docker-edge

Verify Docker (Edge):
  extends: .verify-docker
  variables:
    TEST_IMAGE: $IMAGE:edge
  only:
    refs:
      - master

PyPI Publish Dev (Test PyPI):
  stage: deploy
  script:
    - *install-dependencies
    - *install-dephell
    - *install-npm
    - npx semantic-release --branches $CI_COMMIT_REF --dry-run
    - export MOST_RECENT_VERSION=$(git describe --abbrev=0 --tags | sed 's/v//')
    - export VERSION_TAG="${MOST_RECENT_VERSION}.dev${CI_JOB_ID}"
    - poetry version "$VERSION_TAG"
    - dephell deps convert
    - *publish-pypi-test
  rules:
    # Skip this job if running on master
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: manual


####################################################################################################
# BRANCH-ONLY JOBS
####################################################################################################

# create a Docker image from this branch commit (see rigetti/gitlab-pipelines/docker.gitlab-ci.yml)
Docker (Branch):
  extends: .docker-branch

# test that the branch Docker image doesn't error when performing simple tasks
Verify Docker (Branch):
  extends: .verify-docker
  variables:
    TEST_IMAGE: $IMAGE:$CI_COMMIT_REF_SLUG
  only:
    refs:
      - branches
  except:
    refs:
      - master


####################################################################################################
# RELEASE-ONLY JOBS
####################################################################################################

# create a Docker image from this release (see rigetti/gitlab-pipelines/docker.gitlab-ci.yml)
Docker (Stable):
  extends: .docker-stable

# test that the released Docker image doesn't error when performing simple tasks
Verify Docker (Stable):
  extends: .verify-docker
  variables:
    TEST_IMAGE: $IMAGE:stable
  only:
    refs:
      - /^v(\d+\.)?(\d+\.)?(\d+)$/
  except:
    refs:
      - branches

PyPi Publish Release:
  stage: deploy
  script:
    - *install-dependencies
    - *install-dephell
    - *install-npm
    # This performs the semantic-release configured in package.json.
    # Depending on the config, this may add a tag and then push a release to Gitlab.
    - npx semantic-release --branches master
    # This reads the tag chosen by semantic-release
    - *publish-pypi-public
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: manual

